import argparse
import binascii
import os
import textwrap

from intelhex import IntelHex

"""
This utility converts a binary file into a .dtsi file.
"""

_DTS_TEMPLATE_ = """# DTS binary blob
# Autogenerated file, do not edit!
# Generated on {date}

\\{{
{root}
}};

"""


REGISTERED_CLASSES = {}


def register_format(name):
    def reg(cls):
        REGISTERED_CLASSES[name] = cls()
        return cls
    return reg


class InputFormat(object):
    """
    Base input format, MissingNo?
    """
    def __init__(self) -> None:
        super().__init__()

    def read(self, file):
        ih = IntelHex()
        ih.loadfile(file, format='bin')
        return ih.tobinstr()

    def emit(self, name, data):
        return "%s = [ %s ];" % (name, data)

    def __str__(self) -> str:
        return "missingno?"


@register_format("bin")
class InputFormatBinary(InputFormat):
    """
    Binary file, exported as raw byte array
    """
    def __init__(self) -> None:
        super().__init__()

    def __str__(self) -> str:
        return "binary"


@register_format("hex")
class InputFormatHex(InputFormat):
    """
    Intel hex file, exported as raw byte array
    """
    def __init__(self) -> None:
        super().__init__()

    def read(self, file):
        ih = IntelHex()
        ih.loadfile(file, format='hex')
        return ih.tobinstr()

    def __str__(self) -> str:
        return "ihex"

    def help(self):
        return self.__doc__


input_helpstr = '\n'.join(['*.' + k + ' : ' + v.__doc__ for k,v in REGISTERED_CLASSES.items()])

parser = argparse.ArgumentParser(description='Convert binary file to device tree',
                                 formatter_class=argparse.RawDescriptionHelpFormatter,
                                 epilog=textwrap.dedent('Supported file formats:\n' + input_helpstr))
parser.add_argument('binary', type=str, nargs='+',
                    help='Binary file to convert')
parser.add_argument('-n', '--name', type=str, default='output.dtsi',
                    help='Output filename if OUT is a directory, defaults to "output.dtsi"')
parser.add_argument('-o', '--out', type=str, default='.',
                    help='Output file or directory, defaults to "."')


if __name__ == '__main__':
    args = parser.parse_args()
    output = []
    default_parser = InputFormatBinary()

    # Generate a key/value for each input file
    for file in args.binary:

        # Get correct input parser based on file extension
        filename, file_extension = os.path.splitext(os.path.basename(file))
        formatter = REGISTERED_CLASSES.get(file_extension[1:], default_parser)

        # Try to parse file
        try:
            bs = formatter.read(file)
            par = formatter.emit(filename, binascii.hexlify(bs).decode("utf-8"))
            output.append('\t' + par)
            print("%s : %s -> %s" % (file, formatter, filename))
        except Exception as e:
            print("%s : %s -> %s" % (file, formatter, e.__str__()))

    # Check if output is an existing directory
    output_file = args.out
    if os.path.isdir(output_file):
        print("isdir %s" % output_file)
        output_file = os.path.join(output_file, args.name)

    # Write to file
    with open(output_file, 'w') as _output:
        _output.write(_DTS_TEMPLATE_.format(date='', root='\n'.join(output)))


